#!/usr/bin/env ruby

#   Copyright 2011 Red Hat, Inc.
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

if ARGV.include?('-h') || ARGV.include?('--help')
  puts "Usage: #{$0} stop|start|restart|status
Stop, Start, Restart, or display Status of Aeolus services.

  -h, --help  display this help and exit
"
  exit
end

if !['stop','start','restart','status'].include?(ARGV[0])
  puts "Usage: #{$0} stop|start|restart
Stop, Start, Restart, or display Status of Aeolus services.
"
  exit(1)
end

# ordered as in rc.d
$services = %w(mongod iwhd postgresql httpd deltacloud-core libvirtd aeolus-conductor conductor-delayed_job conductor-dbomatic imagefactory ntpd)

$action_messages = {'status' => 'Checking status of',
                    'start'  => 'Starting',
                    'stop'   => 'Stopping'}
$exit_status = 0

def perform(action, svcs)
  action = action.to_s
  svcs.map do |script|
    puts "\n#{$action_messages[action]} #{script} ..."
    cmd = "service #{script} #{action}"
    out = `#{cmd}`
    if $?.to_i == 0
      puts " \e[1;32mSuccess\e[0m"
    else
      $exit_status = 1
      puts " \e[1;31mFAILURE:\e[0m #{out.strip}"
    end
    $?.to_i
  end
end

def mongod_cleanup_and_restart
  if perform(:status, ['mongod']) == [1]
    lockfile = '/var/lib/mongodb/mongod.lock'
    if File.exists?(lockfile)
      puts " \e[1;33mremoving\e[0m leftover #{lockfile}"
      File.delete(lockfile)
      perform :restart, %w(mongod iwhd)
    end
  end
end

def start
  perform :start, $services
  mongod_cleanup_and_restart
end

def stop
  perform :stop, $services.reverse
end

def restart
  stop
  start
end

def status
  perform :status, $services
end

case ARGV[0]
  when "start"   then start
  when "stop"    then stop
  when "restart" then restart
  when "status"  then status
end

exit $exit_status
